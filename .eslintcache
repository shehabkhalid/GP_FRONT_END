[{"D:\\small projects\\GP-stuff\\code-editor-for-gp-demo\\src\\index.js":"1","D:\\small projects\\GP-stuff\\code-editor-for-gp-demo\\src\\components\\Editor.js":"2","D:\\small projects\\GP-stuff\\code-editor-for-gp-demo\\src\\App.js":"3","D:\\small projects\\GP-stuff\\code-editor-for-gp-demo\\src\\reportWebVitals.js":"4","D:\\small projects\\GP-stuff\\code-editor-for-gp-demo\\src\\components\\Terminal.js":"5"},{"size":500,"mtime":1611674112885,"results":"6","hashOfConfig":"7"},{"size":3993,"mtime":1612239908179,"results":"8","hashOfConfig":"7"},{"size":3297,"mtime":1618751134351,"results":"9","hashOfConfig":"7"},{"size":362,"mtime":1611674112885,"results":"10","hashOfConfig":"7"},{"size":1632,"mtime":1618756584193,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1slb224",{"filePath":"15","messages":"16","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"D:\\small projects\\GP-stuff\\code-editor-for-gp-demo\\src\\index.js",[],["25","26"],"D:\\small projects\\GP-stuff\\code-editor-for-gp-demo\\src\\components\\Editor.js",["27","28","29"],"D:\\small projects\\GP-stuff\\code-editor-for-gp-demo\\src\\App.js",["30"],"D:\\small projects\\GP-stuff\\code-editor-for-gp-demo\\src\\reportWebVitals.js",[],["31","32"],"D:\\small projects\\GP-stuff\\code-editor-for-gp-demo\\src\\components\\Terminal.js",["33","34","35"],"import React, { useEffect, useRef, useState } from 'react'\r\nimport { XTerm } from 'xterm-for-react'\r\nimport { io } from 'socket.io-client'\r\n\r\n\r\nconst Terminal = () =>\r\n{\r\n    const xtermRef = useRef(null)\r\n   \r\n    let socket;\r\n    let command = ''\r\n    useEffect(() =>\r\n    {\r\n        try\r\n        {\r\n\r\n            socket = io(\"http://localhost:8080\");\r\n            socket.on(\"connect\", () =>\r\n            {\r\n                console.log('connected')\r\n                xtermRef.current.terminal.writeln(\"works\")\r\n            })\r\n            socket.on(\"disconnect\", function ()\r\n            {\r\n                xtermRef.current.terminal.writeln(\"\\r\\n*** Disconnected from backend***\\r\\n\");\r\n            });\r\n            socket.on(\"data\", function(data) {\r\n                \r\n                xtermRef.current.terminal.write(data);\r\n              });\r\n            \r\n            xtermRef.current.terminal.onData((data) =>\r\n            {\r\n                socket.emit(\"data\", data);\r\n            })\r\n\r\n            // xtermRef.current.terminal.onKey((e) =>\r\n            // {\r\n\r\n            //     if (e.domEvent.key === \"Enter\")\r\n            //     {\r\n                    \r\n            //         console.log(command)\r\n            //         command=''\r\n\r\n            //     }\r\n            // })\r\n\r\n\r\n\r\n        } catch (error)\r\n        {\r\n            console.log(error)\r\n        }\r\n    }, [])\r\n    return (\r\n        <XTerm\r\n            ref={xtermRef}\r\n\r\n        // onData = {(char)=>{\r\n\r\n        //     setCommand(char);\r\n        //     xtermRef.current.terminal.write(char)\r\n        // }}\r\n\r\n        />\r\n    )\r\n}\r\n\r\nexport default Terminal\r\n",{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":17,"column":19,"nodeType":"42","endLine":17,"endColumn":23},{"ruleId":"43","severity":1,"message":"44","line":41,"column":19,"nodeType":"42","messageId":"45","endLine":41,"endColumn":25},{"ruleId":"40","severity":1,"message":"46","line":108,"column":8,"nodeType":"47","endLine":108,"endColumn":19,"suggestions":"48"},{"ruleId":"43","severity":1,"message":"49","line":1,"column":8,"nodeType":"42","messageId":"45","endLine":1,"endColumn":12},{"ruleId":"36","replacedBy":"50"},{"ruleId":"38","replacedBy":"51"},{"ruleId":"43","severity":1,"message":"52","line":1,"column":36,"nodeType":"42","messageId":"45","endLine":1,"endColumn":44},{"ruleId":"43","severity":1,"message":"53","line":11,"column":9,"nodeType":"42","messageId":"45","endLine":11,"endColumn":16},{"ruleId":"40","severity":1,"message":"54","line":17,"column":22,"nodeType":"55","endLine":17,"endColumn":49},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],"react-hooks/exhaustive-deps","Assignments to the 'divNode' variable from inside React Hook React.useCallback will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside React.useCallback.","Identifier","no-unused-vars","'editor' is assigned a value but never used.","unusedVar","React Hook React.useEffect has a missing dependency: 'divNode'. Either include it or remove the dependency array.","ArrayExpression",["58"],"'logo' is defined but never used.",["56"],["57"],"'useState' is defined but never used.","'command' is assigned a value but never used.","Assignments to the 'socket' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","no-global-assign","no-unsafe-negation",{"desc":"59","fix":"60"},"Update the dependencies array to be: [assignRef, divNode]",{"range":"61","text":"62"},[3881,3892],"[assignRef, divNode]"]